// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['phaser', 'jquery'], function(Phaser, $) {
    var Cat;
    return Cat = (function(_super) {
      __extends(Cat, _super);

      Cat.catTypes = {
        Default: 'catSheet_SB.png',
        First: 'catSheet_1.png',
        Second: 'catSheet_2.png',
        Third: 'catSheet_3.png',
        Four: 'catSheet_4.png',
        Five: 'catSheet_5.png'
      };

      Cat.getRandomCatType = function() {
        var key, list, value, _ref;
        list = [];
        _ref = Cat.catTypes;
        for (key in _ref) {
          value = _ref[key];
          list.push({
            key: key,
            value: value
          });
        }
        return list[Math.floor(Math.random() * list.length)];
      };

      Cat.preload = function(game) {
        var key, value, _ref, _results;
        _ref = Cat.catTypes;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push(game.load.spritesheet('cat' + key, game.normalizeUrl(game.defaults.images + value), 118, 150));
        }
        return _results;
      };

      Cat.defaultSettings = {
        animationFrameRate: 10
      };

      Cat.directons = {
        LEFT: 10,
        RIGHT: 20,
        TOP: 30
      };

      function Cat(game, settings) {
        this.stopRandomAnimation = __bind(this.stopRandomAnimation, this);
        this.startRandomAnimation = __bind(this.startRandomAnimation, this);
        this.changePersonality = __bind(this.changePersonality, this);
        this.stopMove = __bind(this.stopMove, this);
        this.kill = __bind(this.kill, this);
        this.update = __bind(this.update, this);
        this.startMove = __bind(this.startMove, this);
        this.changeCatType = __bind(this.changeCatType, this);
        Cat.__super__.constructor.call(this, game, 0, 0, 'catDefault');
        game.physics.enable(this, Phaser.Arcade);
        game.add.existing(this);
        this.settings = Phaser.Utils.mixin(settings, Phaser.Utils.extend(Cat.defaultSettings));
        this.anchor.setTo(0.5, 0.5);
        this.scale.setTo(0.5, 0.5);
        this.animations.add("runRight", [0, 1, 2, 3, 4, 5]);
        this.animations.add("runLeft", [6, 7, 8, 9, 10, 11]);
        this.animations.add("hideEar", [0, 12, 0]);
        this.animations.add("smile", [0, 13, 0]);
        this.animations.add("look", [0, 14, 0]);
        this.currentType = Cat.catTypes.Default;
        this.body.immovable = true;
      }

      Cat.prototype.changeCatType = function(newCatType) {
        return this.currentType = newCatType;
      };

      Cat.prototype.startMove = function(direction) {
        if (this.health > 0) {
          switch (direction) {
            case Cat.directons.LEFT:
              this.body.velocity.x = this.settings.runVelocity * (-1);
              return this.animations.play('runLeft', this.settings.animationFrameRate);
            case Cat.directons.RIGHT:
              this.body.velocity.x = this.settings.runVelocity;
              return this.animations.play('runRight', this.settings.animationFrameRate);
            case Cat.directons.TOP:
              return this.body.velocity.y = this.settings.jumpVelocity;
            default:
              throw new Error("Unexpected Direction pleas use Cat.direction" + Cat.directons);
          }
        }
      };

      Cat.prototype.update = function() {
        if (Math.random() > 0.999) {
          return this.changePersonality();
        }
      };

      Cat.prototype.kill = function() {
        if (this.health > 0) {
          this.body.destroy();
          console.log("Death");
          game.physics.enable(this, Phaser.Arcade);
          this.body.gravity.y = 100;
          this.body.velocity.y = -400;
          this.body.velocity.x = 400;
          this.body.checkCollision.up = false;
          this.body.checkCollision.down = false;
          this.body.checkCollision.right = false;
          this.body.checkCollision.left = false;
          $('canvas').addClass('kill');
        }
        return this.health = 0;
      };

      Cat.prototype.stopMove = function() {
        this.bringToTop();
        this.body.velocity.x = 0;
        this.animations.stop();
        return this.frame = 0;
      };

      Cat.prototype.changePersonality = function() {
        var self, tween;
        self = this;
        tween = this.game.add.tween(this.scale);
        tween.to({
          x: 0.1,
          y: 0.1
        }, 300);
        tween.onComplete.add(function() {
          var randomType, tween2;
          randomType = Cat.getRandomCatType();
          switch (randomType.value) {
            case Cat.catTypes.First:
              self.game.add.tween(self.scale).to({
                x: 0.6,
                y: 0.6
              }, 100).start();
              break;
            case Cat.catTypes.Second:
              self.game.add.tween(self.scale).to({
                x: 0.2,
                y: 0.2
              }, 100).start();
              break;
            case Cat.catTypes.Third:
              tween2 = self.game.add.tween(self.scale).to({
                x: 0.5,
                y: 0.5
              }, 100).loop();
              break;
            default:
              self.game.add.tween(self.scale).to({
                x: 0.5,
                y: 0.5
              }, 200).start();
          }
          if (tween2) {
            tween2.stop();
          }
          self.loadTexture('cat' + randomType.key, 0);
          return self.currentType = randomType.value;
        });
        return tween.start();
      };

      Cat.prototype.startRandomAnimation = function() {
        var self;
        self = this;
        if (this.randomAnimationLoop === void 0) {
          return this.randomAnimationLoop = game.time.events.loop(Phaser.Timer.SECOND * 5, function() {
            console.log("HideEar");
            this.animations.play('hideEar', this.settings.animationFrameRate);
            this.animations.play('smile', this.settings.animationFrameRate / 2);
            return window.setTimeout(function() {
              return self.animations.play('look', 1);
            }, 2000);
          }, this);
        } else {
          return this.randomAnimationLoop;
        }
      };

      Cat.prototype.stopRandomAnimation = function() {
        return this.game.events.remove(this.randomAnimationTimer);
      };

      return Cat;

    })(Phaser.Sprite);
  });

}).call(this);

//# sourceMappingURL=Cat.js.map
